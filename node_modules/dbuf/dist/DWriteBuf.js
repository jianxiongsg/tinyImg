"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ElemType;
(function (ElemType) {
    ElemType[ElemType["Bool"] = 0] = "Bool";
    ElemType[ElemType["Int32"] = 1] = "Int32";
    ElemType[ElemType["Float32"] = 2] = "Float32";
    ElemType[ElemType["String"] = 3] = "String";
    ElemType[ElemType["Buffer"] = 4] = "Buffer";
})(ElemType || (ElemType = {}));
var DWriteBuf = /** @class */ (function () {
    function DWriteBuf() {
        this.arr = [];
    }
    DWriteBuf.prototype.writeBool = function (v) {
        this.arr.push({
            v: v, type: ElemType.Bool
        });
    };
    DWriteBuf.prototype.writeInt32 = function (v) {
        this.arr.push({
            v: v, type: ElemType.Int32
        });
    };
    DWriteBuf.prototype.writeFloat32 = function (v) {
        this.arr.push({
            v: v, type: ElemType.Float32
        });
    };
    DWriteBuf.prototype.writeJSON = function (v) {
        this.writeString(JSON.stringify(v));
    };
    DWriteBuf.prototype.writeString = function (v) {
        this.arr.push({
            v: v, type: ElemType.String
        });
    };
    DWriteBuf.prototype.writeBuffer = function (v) {
        this.arr.push({
            v: v, type: ElemType.Buffer
        });
    };
    DWriteBuf.prototype.getTotalSize = function () {
        var size = 0;
        this.arr.map(function (obj) {
            switch (obj.type) {
                case ElemType.Int32:
                    size += 4;
                    break;
                case ElemType.Float32:
                    size += 4;
                    break;
                case ElemType.Bool:
                    size += 1;
                    break;
                case ElemType.String:
                    size += 4 + Buffer.byteLength(obj.v);
                    break;
                case ElemType.Buffer:
                    size += 4 + obj.v.length;
                    break;
            }
        });
        return size;
    };
    DWriteBuf.prototype.toBuffer = function () {
        var size = this.getTotalSize();
        var buf = Buffer.allocUnsafe(size);
        var offset = 0;
        this.arr.map(function (obj) {
            var v = obj.v;
            switch (obj.type) {
                case ElemType.Int32:
                    offset = buf.writeInt32LE(v, offset);
                    break;
                case ElemType.Float32:
                    offset = buf.writeFloatLE(v, offset);
                    break;
                case ElemType.Bool:
                    offset = buf.writeInt8(v, offset);
                    break;
                case ElemType.String:
                    offset = buf.writeInt32LE(Buffer.byteLength(v), offset);
                    offset += buf.write(v, offset, "utf8");
                    break;
                case ElemType.Buffer:
                    offset = buf.writeInt32LE(v.length, offset);
                    offset += v.copy(buf, offset, 0, v.length);
                    break;
                default:
                    console.log("invalid arr type", obj.type, obj.v);
            }
        });
        return buf;
    };
    return DWriteBuf;
}());
exports.default = DWriteBuf;
