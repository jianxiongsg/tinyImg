"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var form_data_1 = __importDefault(require("form-data"));
var fs = __importStar(require("fs"));
var dbuf = __importStar(require("dbuf"));
var RemoteFileClient = /** @class */ (function () {
    function RemoteFileClient(url) {
        this.url = url + "/r";
    }
    RemoteFileClient.prototype.recieveData = function (res) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var chunks = [];
                        var size = 0;
                        res.on('data', function (chunk) {
                            chunks.push(chunk);
                            size += chunk.length;
                        });
                        res.on("error", reject);
                        res.on('end', function () {
                            var data;
                            switch (chunks.length) {
                                case 0:
                                    data = new Buffer(0);
                                    break;
                                case 1:
                                    data = chunks[0];
                                    break;
                                default:
                                    data = new Buffer(size);
                                    for (var i = 0, pos = 0, l = chunks.length; i < l; i++) {
                                        var chunk = chunks[i];
                                        chunk.copy(data, pos);
                                        pos += chunk.length;
                                    }
                                    break;
                            }
                            resolve(data);
                        });
                    })];
            });
        });
    };
    RemoteFileClient.prototype.extractData = function (res) {
        return __awaiter(this, void 0, void 0, function () {
            var data, rb, err, params, num, files, i, name, buf;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.recieveData(res)];
                    case 1:
                        data = _a.sent();
                        rb = new dbuf.DReadBuf(data);
                        err = rb.readString();
                        params = rb.readJSON();
                        num = rb.readInt32();
                        files = {};
                        for (i = 0; i < num; ++i) {
                            name = rb.readString();
                            buf = rb.readBuffer();
                            files[name] = buf;
                        }
                        return [2 /*return*/, {
                                err: err, params: params, files: files
                            }];
                }
            });
        });
    };
    RemoteFileClient.prototype.process = function (files, params) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var form = new form_data_1.default();
                        if (params) {
                            form.append("params", JSON.stringify(params));
                        }
                        for (var fieldname in files) {
                            form.append(fieldname, fs.createReadStream(files[fieldname]));
                        }
                        form.submit(_this.url, function (err, res) { return __awaiter(_this, void 0, void 0, function () {
                            var info;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (err) {
                                            reject(err);
                                            return [2 /*return*/];
                                        }
                                        return [4 /*yield*/, this.extractData(res)];
                                    case 1:
                                        info = _a.sent();
                                        res.resume();
                                        resolve(info);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                    })];
            });
        });
    };
    return RemoteFileClient;
}());
exports.RemoteFileClient = RemoteFileClient;
