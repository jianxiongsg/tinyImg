"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = __importDefault(require("express"));
var lodash_1 = __importDefault(require("lodash"));
var http_1 = __importDefault(require("http"));
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var multer_1 = __importDefault(require("multer"));
var body_parser_1 = __importDefault(require("body-parser"));
var dbuf = __importStar(require("dbuf"));
var RemoteFileServer = /** @class */ (function () {
    function RemoteFileServer(port, processor, option) {
        this.port = port;
        this.processor = processor;
        this.uploadFolder = (option && option.uploadFolder) || 'uploads/';
        this.cleanUpTime = (option && option.cleanUpTime) || 2 * 24 * 3600 * 1000;
        this.start();
    }
    RemoteFileServer.prototype.message = function (req, res) {
        return __awaiter(this, void 0, void 0, function () {
            var params, infos, files, info, wb, name;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (req.body.params) {
                            params = JSON.parse(req.body.params);
                        }
                        infos = req.files;
                        files = {};
                        infos.map(function (info) { return files[info.fieldname] = info.path; });
                        return [4 /*yield*/, this.processor(files, params)];
                    case 1:
                        info = _a.sent();
                        wb = new dbuf.DWriteBuf();
                        wb.writeString(info.err ? info.err : "");
                        wb.writeString(info.params ? JSON.stringify(info.params) : "");
                        wb.writeInt32(info.files ? lodash_1.default.size(info.files) : 0);
                        for (name in info.files) {
                            wb.writeString(name);
                            wb.writeBuffer(fs_1.default.readFileSync(info.files[name]));
                        }
                        res.end(wb.toBuffer());
                        return [2 /*return*/];
                }
            });
        });
    };
    RemoteFileServer.prototype.start = function () {
        var _this = this;
        var app = express_1.default();
        app.use(body_parser_1.default.urlencoded({ extended: true }));
        var upload = multer_1.default({ dest: this.uploadFolder });
        app.post('/r', upload.any(), this.message.bind(this));
        this.server = http_1.default.createServer(app).listen(this.port, function () {
            console.log("server started", _this.port);
        });
        this.timeHandler = setInterval(this.clean.bind(this), this.cleanUpTime);
    };
    RemoteFileServer.prototype.clean = function () {
        var _this = this;
        if (!fs_1.default.existsSync(this.uploadFolder)) {
            return;
        }
        var files = fs_1.default.readdirSync(this.uploadFolder);
        var deadtime = new Date().getTime() - this.cleanUpTime;
        files.map(function (file) {
            var filePath = path_1.default.resolve(_this.uploadFolder, file);
            var st = fs_1.default.statSync(filePath);
            if (deadtime > new Date(st.birthtime).getTime()) {
                fs_1.default.unlinkSync(filePath);
            }
        });
    };
    RemoteFileServer.prototype.close = function () {
        if (this.timeHandler) {
            clearInterval(this.timeHandler);
        }
        this.server.close();
    };
    return RemoteFileServer;
}());
exports.RemoteFileServer = RemoteFileServer;
